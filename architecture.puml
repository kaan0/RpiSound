@startuml
' ====== Interfaces ======
interface ISoundLoader {
    +load(filePath: std::string): bool
    +getSample(name: std::string_view): SoundSample&
}

interface ISoundManager {
    +triggerSound(sampleName: std::string, velocity: int)
    +setInstrument(instrumentType: std::string)
}

interface IAudioDevice {
    +open(deviceName: std::string): bool
    +close()
    +write(span<const types::audio_t> samples): bool
    +getDevices(): std::vector<std::string>
}

interface IMidiInputHandler {
    +onMidiEvent(event: MidiEvent)
}

interface IEffect {
    +process(samples: span<audio_t>, channels: size_t, frames: size_t)
}

' ====== Concrete Classes ======
class PCMLoader implements ISoundLoader {
    -mmapFile(path: std::string)
    -samples: std::unordered_map<std::string, SoundSample>
}

class SoundSample {
    +data: vector<audio_t>
    +metadata: Metadata
}

class SoundManager implements ISoundManager, IMidiInputHandler {
    -loader: ISoundLoader*
    -audioDevice: IAudioDevice*
    -effectChain: EffectChain
    -ringBuffer: RingBuffer
    +triggerSound(sampleName: std::string, velocity: int)
    +setInstrument(instrumentType: std::string)
    +onMidiEvent(event: MidiEvent)
}

class AudioDevice implements IAudioDevice {
    -deviceId: int
    +open(deviceName: std::string): bool
    +close()
    +write(data: void*, numBytes: size_t): bool
    +getInfo(): std::string
}

class EffectChain {
    -effects: std::vector<IEffect*>
    +addEffect(effect: IEffect*)
    +process(samples: span<audio_t>, channels: size_t, frames: size_t)
}

class BalanceEffect implements IEffect {
    -balance: float
    +setBalance(balance: float)
    +process(samples: span<audio_t>, channels: size_t, frames: size_t)
}

class ReverbEffect implements IEffect {
    -params: ReverbParams
    +setParams(params: ReverbParams)
    +process(samples: span<audio_t>, channels: size_t, frames: size_t)
}

class RingBuffer {
    -buffer: int16_t[]
    -size: size_t
    +write(data: int16_t*, n: size_t): bool
    +read(data: int16_t*, n: size_t): bool
}

class Metadata {
    +name       : std::string
    +sampleRate : uint32_t
    +frames     : size_t
    +channels   : uint16_t
}

class MidiEvent {
    +type     : int
    +note     : int
    +velocity : int
}

' ====== Relationships ======
SoundManager --> ISoundLoader
SoundManager --> IAudioDevice
SoundManager --> EffectChain
SoundManager --> RingBuffer
EffectChain --> IEffect
ISoundLoader --> SoundSample
SoundSample --> Metadata
SoundManager ..> MidiEvent
@enduml
